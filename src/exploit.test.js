import {SubscriptionClient} from "subscriptions-transport-ws";
import {WebSocketLink} from "apollo-link-ws";
import {server} from "./server";
import {execute} from "apollo-link";
import {afterAll, beforeAll, describe, expect} from "@jest/globals";
import gql from "graphql-tag";

const TEST_PORT = 4853;
const wsUri = `ws://localhost:${TEST_PORT}/graphql`;

const subscription = gql`
subscription Subscription {
  data {
    id
  }
}
`;

describe('client', () => {

  beforeAll(async () => {
    return new Promise(resolve => {
      server.listen(TEST_PORT).then(() => resolve());
    })
  })

  afterAll(async () => {
    return new Promise(resolve => {
      server.stop().then(() => resolve());
    })
  })

  test('malicious implementation', async () => new Promise(resolve => {
    const ws = new WebSocket(wsUri, 'graphql-ws');
    const message = {
      payload: {
        query: subscription
      },
      type: 'start',
      id: '1'
    }

    ws.onmessage = event => {
      const data = JSON.parse(event.data);
      if (data.type === "data") {
        // received data without authentication
        ws.close();
        expect(data.payload).toEqual({
          data: {
            data: {
              id: 123
            }
          }
        })
        resolve()
      }
    }

    ws.onopen = () => {
      ws.send(JSON.stringify(message));
    }
  }))

  test('implementation with raw socket', async () => new Promise(resolve => {
    const ws = new WebSocket(wsUri, 'graphql-ws');
    const messageInit = {
      payload: {
        secret: "don't know"
      },
      type: 'connection_init',
      id: '1'
    }
    const message = {
      payload: {
        query: subscription
      },
      type: 'start',
      id: '1'
    }

    ws.onmessage = event => {
      const data = JSON.parse(event.data);
      if (data.type === "connection_error") {
        // received connection error, but trying to start subscription
        ws.send(JSON.stringify(message))
      } else if (data.type === "error") {
        // subscription start failed, no access
        expect(data.payload).toEqual({
          message: "no access"
        })
        resolve()
      }
    }

    ws.onopen = () => {
      ws.send(JSON.stringify(messageInit));
    }
    }))

  test('implementation with apollo client - blocked', async () => new Promise((resolve, reject) => {
    const client = new SubscriptionClient(wsUri, {
      connectionParams: {
        secret: "don't know"
      },
      connectionCallback: error => {
        expect(error).toEqual({
          message: "no access"
        })
        setTimeout(() => resolve(), 1000);
      }
    });
    const link = new WebSocketLink(client);
    execute(link, {
      query: subscription
    }).subscribe(() => {
      reject("received event")
    })
    }))

  test('implementation with apollo client - allowed', async () => new Promise(resolve => {
    const client = new SubscriptionClient(wsUri, {
      connectionParams: {
        secret: "hello"
      },
      connectionCallback: error => {
        expect(error).toBeUndefined()
      }
    });
    const link = new WebSocketLink(client);
    execute(link, {
      query: subscription
    }).subscribe(() => {
      resolve()
    })
    }))
})
